//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5096";
    }

    getGenerateClient(): Promise<void> {
        let url_ = this.baseUrl + "/generate-client";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGenerateClient(_response);
        });
    }

    protected processGetGenerateClient(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBoards(command: CreateBoardRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/boards";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBoards(_response);
        });
    }

    protected processPostApiBoards(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiBoards(): Promise<GetBoardsResponse[]> {
        let url_ = this.baseUrl + "/api/boards";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiBoards(_response);
        });
    }

    protected processGetApiBoards(response: Response): Promise<GetBoardsResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetBoardsResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetBoardsResponse[]>(null as any);
    }

    putApiBoards(command: UpdateBoardRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/boards";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutApiBoards(_response);
        });
    }

    protected processPutApiBoards(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteApiBoards(command: DeleteBoardRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/boards";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteApiBoards(_response);
        });
    }

    protected processDeleteApiBoards(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiKanbantasks(command: CreateKanbanTaskRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/kanbantasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiKanbantasks(_response);
        });
    }

    protected processPostApiKanbantasks(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiKanbantasks(query: GetKanbanTasksRequest): Promise<GetKanbanTasksResponse[]> {
        let url_ = this.baseUrl + "/api/kanbantasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_: RequestInit = {
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiKanbantasks(_response);
        });
    }

    protected processGetApiKanbantasks(response: Response): Promise<GetKanbanTasksResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetKanbanTasksResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetKanbanTasksResponse[]>(null as any);
    }

    putApiKanbantasks(command: UpdateKanbanTaskRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/kanbantasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutApiKanbantasks(_response);
        });
    }

    protected processPutApiKanbantasks(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteApiKanbantasks(command: DeleteKanbanTaskRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/kanbantasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteApiKanbantasks(_response);
        });
    }

    protected processDeleteApiKanbantasks(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class HttpValidationProblemDetails extends ProblemDetails implements IHttpValidationProblemDetails {
    errors?: { [key: string]: string[]; };

    [key: string]: any;

    constructor(data?: IHttpValidationProblemDetails) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): HttpValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new HttpValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export interface IHttpValidationProblemDetails extends IProblemDetails {
    errors?: { [key: string]: string[]; };

    [key: string]: any;
}

export class CreateBoardRequest implements ICreateBoardRequest {
    name?: string;
    boardColumns?: CreateBoardColumnRequest[];

    constructor(data?: ICreateBoardRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["boardColumns"])) {
                this.boardColumns = [] as any;
                for (let item of _data["boardColumns"])
                    this.boardColumns!.push(CreateBoardColumnRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateBoardRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBoardRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.boardColumns)) {
            data["boardColumns"] = [];
            for (let item of this.boardColumns)
                data["boardColumns"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ICreateBoardRequest {
    name?: string;
    boardColumns?: CreateBoardColumnRequest[];
}

export class CreateBoardColumnRequest implements ICreateBoardColumnRequest {
    name?: string;

    constructor(data?: ICreateBoardColumnRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateBoardColumnRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBoardColumnRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateBoardColumnRequest {
    name?: string;
}

export class GetBoardsResponse implements IGetBoardsResponse {
    id?: number;
    name?: string;
    boardColumns?: GetBoardColumnsResponse[];

    constructor(data?: IGetBoardsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["boardColumns"])) {
                this.boardColumns = [] as any;
                for (let item of _data["boardColumns"])
                    this.boardColumns!.push(GetBoardColumnsResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBoardsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetBoardsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.boardColumns)) {
            data["boardColumns"] = [];
            for (let item of this.boardColumns)
                data["boardColumns"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IGetBoardsResponse {
    id?: number;
    name?: string;
    boardColumns?: GetBoardColumnsResponse[];
}

export class GetBoardColumnsResponse implements IGetBoardColumnsResponse {
    id?: number;
    name?: string;

    constructor(data?: IGetBoardColumnsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetBoardColumnsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetBoardColumnsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGetBoardColumnsResponse {
    id?: number;
    name?: string;
}

export class UpdateBoardRequest implements IUpdateBoardRequest {
    id?: number;
    name?: string;
    boardColumns?: UpdateBoardColumnRequest[];

    constructor(data?: IUpdateBoardRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["boardColumns"])) {
                this.boardColumns = [] as any;
                for (let item of _data["boardColumns"])
                    this.boardColumns!.push(UpdateBoardColumnRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateBoardRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBoardRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.boardColumns)) {
            data["boardColumns"] = [];
            for (let item of this.boardColumns)
                data["boardColumns"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IUpdateBoardRequest {
    id?: number;
    name?: string;
    boardColumns?: UpdateBoardColumnRequest[];
}

export class UpdateBoardColumnRequest implements IUpdateBoardColumnRequest {
    id?: number;
    name?: string;

    constructor(data?: IUpdateBoardColumnRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateBoardColumnRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBoardColumnRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUpdateBoardColumnRequest {
    id?: number;
    name?: string;
}

export class DeleteBoardRequest implements IDeleteBoardRequest {
    id?: number;

    constructor(data?: IDeleteBoardRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteBoardRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteBoardRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteBoardRequest {
    id?: number;
}

export class CreateKanbanTaskRequest implements ICreateKanbanTaskRequest {
    title?: string;
    description?: string;
    boardColumnId?: number;
    subtasks?: CreateSubtaskRequest[];

    constructor(data?: ICreateKanbanTaskRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.description = _data["description"];
            this.boardColumnId = _data["boardColumnId"];
            if (Array.isArray(_data["subtasks"])) {
                this.subtasks = [] as any;
                for (let item of _data["subtasks"])
                    this.subtasks!.push(CreateSubtaskRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateKanbanTaskRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateKanbanTaskRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["boardColumnId"] = this.boardColumnId;
        if (Array.isArray(this.subtasks)) {
            data["subtasks"] = [];
            for (let item of this.subtasks)
                data["subtasks"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ICreateKanbanTaskRequest {
    title?: string;
    description?: string;
    boardColumnId?: number;
    subtasks?: CreateSubtaskRequest[];
}

export class CreateSubtaskRequest implements ICreateSubtaskRequest {
    description?: string;

    constructor(data?: ICreateSubtaskRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateSubtaskRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSubtaskRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateSubtaskRequest {
    description?: string;
}

export class GetKanbanTasksResponse implements IGetKanbanTasksResponse {
    id?: number;
    title?: string;
    description?: string;

    constructor(data?: IGetKanbanTasksResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GetKanbanTasksResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetKanbanTasksResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        return data;
    }
}

export interface IGetKanbanTasksResponse {
    id?: number;
    title?: string;
    description?: string;
}

export class GetKanbanTasksRequest implements IGetKanbanTasksRequest {
    boardColumnId?: number;

    constructor(data?: IGetKanbanTasksRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.boardColumnId = _data["boardColumnId"];
        }
    }

    static fromJS(data: any): GetKanbanTasksRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetKanbanTasksRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["boardColumnId"] = this.boardColumnId;
        return data;
    }
}

export interface IGetKanbanTasksRequest {
    boardColumnId?: number;
}

export class UpdateKanbanTaskRequest implements IUpdateKanbanTaskRequest {
    id?: number;
    title?: string;
    description?: string;
    subtasks?: UpdateSubtaskRequest[];

    constructor(data?: IUpdateKanbanTaskRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
            if (Array.isArray(_data["subtasks"])) {
                this.subtasks = [] as any;
                for (let item of _data["subtasks"])
                    this.subtasks!.push(UpdateSubtaskRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateKanbanTaskRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateKanbanTaskRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        if (Array.isArray(this.subtasks)) {
            data["subtasks"] = [];
            for (let item of this.subtasks)
                data["subtasks"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IUpdateKanbanTaskRequest {
    id?: number;
    title?: string;
    description?: string;
    subtasks?: UpdateSubtaskRequest[];
}

export class UpdateSubtaskRequest implements IUpdateSubtaskRequest {
    id?: number;
    description?: string;

    constructor(data?: IUpdateSubtaskRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateSubtaskRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSubtaskRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateSubtaskRequest {
    id?: number;
    description?: string;
}

export class DeleteKanbanTaskRequest implements IDeleteKanbanTaskRequest {
    id?: number;

    constructor(data?: IDeleteKanbanTaskRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteKanbanTaskRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteKanbanTaskRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteKanbanTaskRequest {
    id?: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}